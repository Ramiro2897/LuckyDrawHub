import { Request, Response } from "express";
import { AppDataSource } from "../data-source";
import { RaffleNumber } from "../entities/RaffleNumber";
import dotenv from "dotenv";

dotenv.config();

export const paymentNumbers = async (req: Request, res: Response): Promise<Response> => {
    try {
        console.log("üì© Recibiendo confirmaci√≥n de pago de ePayco...");

        const { x_transaction_state, x_cod_transaction_state, x_response, x_id_invoice, x_customer_email } = req.body;
        console.log("üìå Referencia de pago recibida:", x_id_invoice);
        console.log("üìå correo recibido:", x_customer_email);

        // Validamos el estado del pago
        if (x_transaction_state === "Aceptada" || x_cod_transaction_state === "1") {
            console.log("‚úÖ Pago aprobado correctamente");

            // Verificamos que se haya recibido la referencia de pago
            if (!x_id_invoice) {
                console.warn("‚ö†Ô∏è No se recibi√≥ la referencia de pago.");
                return res.status(400).json({ errors: { general: "No se recibi√≥ la referencia de pago." } });
            }

            // Buscar los n√∫meros asociados a la referencia de pago
            const numbersToUpdate = await AppDataSource.getRepository(RaffleNumber)
                .createQueryBuilder("number")
                .where("number.paymentReference = :reference", { reference: x_id_invoice})
                .getMany();

            if (numbersToUpdate.length === 0) {
                console.warn("‚ö†Ô∏è No se encontraron n√∫meros asociados a esta referencia.");
                return res.status(404).json({ errors: { general: "No hay n√∫meros para bloquear." } });
            }

            // Bloquear y marcar como vendidos los n√∫meros
            await AppDataSource.getRepository(RaffleNumber)
                .createQueryBuilder()
                .update(RaffleNumber)
                .set({ isBlocked: true, isSold: true, email: x_customer_email })
                .where("paymentReference = :reference", { reference: x_id_invoice })
                .execute();

            console.log("üîí N√∫meros bloqueados y vendidos exitosamente:", numbersToUpdate.map(n => n.number));
        } else {
            console.warn("‚ùå Pago rechazado o en proceso:", x_response);
        }

        // Respondemos a ePayco (importante para que no vuelva a enviar la confirmaci√≥n)
        return res.status(200).send("OK");
    } catch (error) {
        console.error("‚ùå Error al procesar la confirmaci√≥n de pago:", error);
        return res.status(500).json({ errors: { general: "Error interno del servidor" } });
    }
};
